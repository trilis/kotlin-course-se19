[CustomFunctionStatement(name=fib, arguments=[n], body=[IfStatement(condition=BinaryExpression(lhs=VariableExpression(name=n), rhs=NumberExpression(number=1), op=LESS_EQUALS), mainBranch=[ReturnStatement(expression=NumberExpression(number=1))], elseBranch=null), ReturnStatement(expression=BinaryExpression(lhs=FunctionCallExpression(name=fib, arguments=[BinaryExpression(lhs=VariableExpression(name=n), rhs=NumberExpression(number=1), op=MINUS)]), rhs=FunctionCallExpression(name=fib, arguments=[BinaryExpression(lhs=VariableExpression(name=n), rhs=NumberExpression(number=2), op=MINUS)]), op=PLUS))]), VariableStatement(name=i, initializer=NumberExpression(number=1)), CycleStatement(condition=BinaryExpression(lhs=VariableExpression(name=i), rhs=NumberExpression(number=5), op=LESS_EQUALS), body=[FunctionCallExpression(name=println, arguments=[VariableExpression(name=i), FunctionCallExpression(name=fib, arguments=[VariableExpression(name=i)])]), AssignmentStatement(name=i, value=BinaryExpression(lhs=VariableExpression(name=i), rhs=NumberExpression(number=1), op=PLUS))])]